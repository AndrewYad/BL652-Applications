// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Copyright (c) 2016, Laird                                                  ++
//                                                                            ++
// Permission to use, copy, modify, and/or distribute this software for any   ++
// purpose with or without fee is hereby granted, provided that the above     ++
// copyright notice and this permission notice appear in all copies.          ++
//                                                                            ++
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES   ++
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF           ++
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR    ++
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES     ++
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN      ++
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR ++
// IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                ++
//                                                                            ++
// SPDX-License-Identifier:ISC                                                ++
//                                                                            ++
//******************************************************************************
//
// BL652 Data Length Extension: this app demonstrates the use of Data Length Extension
// feature on the BL652. This is the peripheral app and should ONLY be used against another
// BL652 loaded with $autorun$.dle.data.length.extension.central.sb
//
//******************************************************************************
//
//
//******************************************************************************
// Definitions
//******************************************************************************
#define ENABLE_DATA_LENGTH_EXTENSION            1

//******************************************************************************
// Global Variable Declarations
//******************************************************************************

dim rc                          //Result code variable (used for checking if a function completed successfully or not)
dim BaseUUID                    //Base UUID for the VSP service which other UUIDs will be siblings of
dim ConnectionID                //Holds the connection ID of the VSP client (if one is connected)
dim Encrypted : Encrypted=0     //Will be 0 if connection is not encrypted, 1 if it is

dim nBleMaxPacketLength : nBleMaxPacketLength = 27  //Default maximum packet length on BL652
dim nAttributeMTU       : nAttributeMTU = 23        //Default Maximum Transmission Unit on BL652
dim nAttributeLength    : nAttributeLength = 20     //Default Attribute Data Length on BL652

//******************************************************************************
// Initialise Global Variable
//******************************************************************************
ConnectionID = 0

//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************

//-------------------------------------------------------------------------------
// Definitions for attribute values needed to achieve Data Length Extension
#define ATTRIBUTE_MTU_KEY_ID                    211
#define ATTRIBUTE_DATA_LENGTH_KEY_ID            212
#define ATTRIBUTE_MTU_MAXIMUM                   247
#define ATTRIBUTE_DATA_LENGTH_MAXIMUM           244
#define BLE_MAX_PACKET_LENGTH                   251
//-------------------------------------------------------------------------------
// This function is used to configure the BL652 to use the maximum Attribute
// Transmission Unit (MTU), maximum Attribute Data Length, and the maximum
// packet length
//-------------------------------------------------------------------------------
function DataLengthExtension()

    rc = NvCfgKeyGet(ATTRIBUTE_MTU_KEY_ID, nAttributeMTU)
    rc = NvCfgKeyGet(ATTRIBUTE_DATA_LENGTH_KEY_ID, nAttributeLength)

    IF  (nAttributeMTU != ATTRIBUTE_MTU_MAXIMUM) || (nAttributeLength != ATTRIBUTE_DATA_LENGTH_MAXIMUM) THEN
        // Change the Attribute MTU to be the maximum allowed by the BL652
        rc = NvCfgKeySet(ATTRIBUTE_MTU_KEY_ID, ATTRIBUTE_MTU_MAXIMUM)
        // Change the Attribute Data Length to be the maximum allowed by the BL652
        rc = NvCfgKeySet(ATTRIBUTE_DATA_LENGTH_KEY_ID, ATTRIBUTE_DATA_LENGTH_MAXIMUM)
        // Reset the module so that the data is overwritten
        Reset(0)
    ENDIF

    // Set maximum packet length
    nBleMaxPacketLength = BLE_MAX_PACKET_LENGTH
    rc = BleMaxPacketLengthSet(nBleMaxPacketLength)

endfunc 0

//------------------------------------------------------------------------------
// Assert to check that a resultCode is 0 which means success
//------------------------------------------------------------------------------
sub AssertRC(rc, tag)
    if (rc != 0) then
        print "Assert Error ";rc;" @ tag ";tag;"\r\n"
    endif
endsub

//------------------------------------------------------------------------------
// Function that will load the VSP configuration and initiate the VSP service
//------------------------------------------------------------------------------
function OpenVSPService()
    // Creates the VSP server instance
    dim TmpStr$, vspTxBufLen, vspRxBufLen, VspFlags, RxUUID, TxUUID, ModemInUUID, ModemOutUUID
    TmpStr$ = ""

    // Tx buffer size
    vspTxBufLen = 384
    // Rx buffer size
    vspRxBufLen = 1024

    // Base UUID
    TmpStr$ = "569a1101b87f490c92cb11ba5ea5167c"
    TmpStr$ = StrDehexize$(TmpStr$)
    BaseUUID = BleHandleUuid128(TmpStr$)

    // Setup Tx/Rx characteristics
    TxUUID = 0x2000
    TxUUID = BleHandleUuidSibling(BaseUUID, TxUUID)
    RxUUID = 0x2001
    RxUUID = BleHandleUuidSibling(BaseUUID, RxUUID)

    // Setup Modem characteristics
    ModemInUUID  = 0x2002
    ModemInUUID = BleHandleUuidSibling(BaseUUID, ModemInUUID)
    ModemOutUUID = 0x2003
    ModemOutUUID = BleHandleUuidSibling(BaseUUID, ModemOutUUID)

    // VspFlags
    VspFlags = 0

    // Open the VSP service with the provided configuration
    rc = BleVSPOpenEx(vspTxBufLen, vspRxBufLen, VspFlags, BaseUUID, RxUUID, TxUUID, ModemInUUID, ModemOutUUID)
endfunc 1

//------------------------------------------------------------------------------
// This shows the cuttent connection parameters
//------------------------------------------------------------------------------
sub ShowConnParms()
    dim intrvl,sprvto,slat
    rc = BleGetCurConnParms(ConnectionID,intrvl,sprvto,slat)
    print "## ConnParms :: Interval=";intrvl;",SuperTout=";sprvto;",SlaveLatency=";slat;"\n"
endsub

//------------------------------------------------------------------------------
// Function to handle Ble event messages
//------------------------------------------------------------------------------
#define BLE_EVBLEMSGID_CONNECT                  0   //nCtx = connection handle
#define BLE_EVBLEMSGID_DISCONNECT               1   //nCtx = connection handle
#define BLE_EVBLEMSGID_SERVICE_ERROR            4   //nCtx = resultcode
#define BLE_EVBLEMSGID_DISPLAY_PASSKEY          9   //nCtx = passcode to display
#define BLE_EVBLEMSGID_NEW_BOND                 10  //nCtx = connection handle
#define BLE_EVBLEMSGID_AUTH_KEY_REQUEST         11  //nCtx = 1 for passkey, 2 for 16 byte OOB data
#define BLE_EVBLEMSGID_HRS_NOTIFICATION_STATE   12  //nCtx = new notification state 0=off, 1=on
#define BLE_EVBLEMSGID_CONN_PARMS_UPDATE        14  //nCtx = connection handle
#define BLE_EVBLEMSGID_CONN_PARMS_UPDATE_FAIL   15  //nCtx = connection handle
#define BLE_EVBLEMSGID_CONN_TO_BONDED_MASTER    16  //nCtx = connection handle
#define BLE_EVBLEMSGID_UPDATED_BOND             17  //nCtx = connection handle
#define BLE_EVBLEMSGID_ENCRYPTED                18  //nCtx = connection handle
#define BLE_EVBLEMSGID_POWER_FAILURE_WARNING    19  //nCtx = current supply voltage
#define BLE_EVBLEMSGID_UNENCRYPTED              20  //nCtx = connection handle
#define BLE_EVBLEMSGID_DEVICENAME_WRITE         21  //nCtx = connection handle
//------------------------------------------------------------------------------
function HndlrBleMsg(nMsgId, nCtx)

    select nMsgId
    case BLE_EVBLEMSGID_CONNECT
        PRINT "## Connected\n"
        ConnectionID = nCtx
        ShowConnParms()

    case BLE_EVBLEMSGID_DISCONNECT
        PRINT "## Disconnected!\n"
        dim Addr$ : Addr$ = ""
        rc = BleAdvertStart(0, Addr$, 250, 0, 0)

    case BLE_EVBLEMSGID_CONN_PARMS_UPDATE
        ShowConnParms()

    case else
    endselect

endfunc 1

//------------------------------------------------------------------------------
// Function for bridging data between the VSP service and the UART
//------------------------------------------------------------------------------
function HndlrBridge()
    //Pass data between UART and VSP service
    BleVspUartBridge()
endfunc 1

//------------------------------------------------------------------------------
// This handler is called when there is an event that the attribute MTU has changed
//------------------------------------------------------------------------------
FUNCTION HandlerAttrMTUchng(BYVAL hCOnn AS INTEGER, BYVAL nSize AS INTEGER)
    print "## Attribute MTU Changed - Size=";nSize;"\n"
ENDFUNC 1

//------------------------------------------------------------------------------
// This handler is called when the packet length is changed
//------------------------------------------------------------------------------
FUNCTION HandlerPacketLength(BYVAL hConn, BYVAL Tx_Octets, BYVAL Tx_Time, BYVAL Rx_Octets, BYVAL Rx_Time)
    print "## Packet Length Changed - Tx=";Tx_Octets;" Rx=";Tx_Octets;"\n"
ENDFUNC 1

//******************************************************************************
// Start up code from here -equivalent to main() in a 'C' application
//******************************************************************************

// Close UART and open at 921600 baud rate
UARTClose()
rc = UartOpen(921600, 0, 0, "CN81H")

// Enable Data Length Extension
IF ENABLE_DATA_LENGTH_EXTENSION==1 THEN
    rc = DataLengthExtension()
ENDIF

// Setup VSP service
rc = OpenVSPService()

// Register GAP service with device name and connection intervals
dim DevName$ : DevName$ = "LAIRD_BL652"
rc = BleGapSvcInit(DevName$, 0, 0, 7500, 7700, 4000000,  0)

// Start Ble adverts
dim Addr$ : Addr$ = ""
rc = BleAdvertStart(0, Addr$, 250, 0, 0)


//******************************************************************************
//Setup event handlers
//******************************************************************************
// Generic BLE events
ONEVENT EVBLEMSG        CALL HndlrBleMsg
// UART-VSP events
ONEVENT EVVSPRX         CALL HndlrBridge
ONEVENT EVUARTRX        CALL HndlrBridge
ONEVENT EVVSPTXEMPTY    CALL HndlrBridge
ONEVENT EVUARTTXEMPTY   CALL HndlrBridge
// Data Length Extenstion events
ONEVENT EVATTRIBUTEMTU  CALL HandlerAttrMTUchng
ONEVENT EVPACKETLENGTH  CALL HandlerPacketLength

//******************************************************************************
//Wait in a lower-power mode for an event to occur
//******************************************************************************
WAITEVENT
