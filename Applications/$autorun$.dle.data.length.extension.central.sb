// Copyright (c) 2015, Laird
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
// IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
// SPDX-License-Identifier:ISC
//
//******************************************************************************
//
// BL652 Data Length Extension: this app demonstrates the use of Data Length Extension
// feature on the BL652. This is the central app and should ONLY be used against another
// BL652 loaded with $autorun$.dle.data.length.extension.peripheral.sb
//
//******************************************************************************
//
//******************************************************************************

//This is the target Bluetooth device to connect to, 7 bytes in hex
#define BTAddr "000016A4B75202"

//******************************************************************************
// Definitions
//******************************************************************************

#define ENABLE_DATA_LENGTH_EXTENSION			1

// Set this to 0 to disable all debugging messages
#define ENABLE_DEBUG_PRINTS             1

// Hardcoded GATT attributes of remote BL652 running $autorun$.dle.peripheral.sb
#define REMOTE_RX_VALUE_HANDLE			19
#define REMOTE_TX_VALUE_HANDLE			16
#define REMOTE_MODEMIN_VALUE_HANDLE		24
#define REMOTE_MODEMOUT_VALUE_HANDLE	21
#define REMOTE_TX_CCCD_HANDLE			17
#define REMOTE_MODEMOUT_CCCD_HANDLE		22

//******************************************************************************
// Global Variable Declarations
//******************************************************************************
dim rc								//Result code
dim BleHandle						//Ble Connection Handle
dim Mode : Mode = 0					//Current program mode: 0 = connecting, 1 = connected, find modem in characteristic, 2 = find modem out characteristic, 3 = find RX characteristic, 4 = find TX characteristic, 5 = find modem out descriptor, 6 = find TX descriptor, 7 = enable modem out notIFications, 8 = enable TX, 9 = enable modem in status
dim MIHandle      					//Modem In handle (IF one exists)
dim MOHandle						//Modem Out handle (IF one exists)
dim RXHandle						//RX handle
dim TXHandle						//TX handle
dim MOCCCDHandle					//Modem Out CCCD handle (IF one exists)
dim TXCCCDHandle    				//TX CCCD handle (IF one exists)
dim Val$							//Value to write and read from characteristics
dim BufferState : BufferState = 0	//Buffer state
dim BufferFull : BufferFull = 0		//Buffer full
dim u$ : u$ = ""					//UART read buffer
dim RecBuf$ : RecBuf$ = ""			//VSP read buffer
dim ModemStat : ModemStat = 1		//Modem in status
dim nBleMaxPacketLength				//Default maximum packet length on BL652
dim nAttributeMTU					//Default Maximum Transmission Unit on BL652
dim nAttributeLength				//Default Attribute Data Length on BL652

//******************************************************************************
// Initialise Global Variable
//******************************************************************************
RxHandle = REMOTE_RX_VALUE_HANDLE
TXHandle = REMOTE_TX_VALUE_HANDLE
MIHandle = REMOTE_MODEMIN_VALUE_HANDLE
MOHandle = REMOTE_MODEMOUT_VALUE_HANDLE
TXCCCDHandle = REMOTE_TX_CCCD_HANDLE
MOCCCDHandle = REMOTE_MODEMOUT_CCCD_HANDLE

nBleMaxPacketLength = 27			// The default maximum packet length on BL652 is 27
nAttributeMTU = 23					// The default ATT_MTU on the BL652 is 23
nAttributeLength = 20				// The default attribute length on the BL652 is 20

//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************

//------------------------------------------------------------------------------
// Assert to check that a resultCode is 0 which means success
//------------------------------------------------------------------------------
SUB AssertRC(rc, tag)
	if (rc != 0) then
		print "Assert Error ";rc;" @ tag ";tag;"\r\n"
	endif
ENDSUB

//-------------------------------------------------------------------------------
// Definitions for attribute values needed to achieve Data Length Extension
#define ATTRIBUTE_MTU_KEY_ID					211
#define ATTRIBUTE_DATA_LENGTH_KEY_ID			212
#define ATTRIBUTE_MTU_MAXIMUM					247
#define ATTRIBUTE_DATA_LENGTH_MAXIMUM			244
#define BLE_MAX_PACKET_LENGTH					251
//-------------------------------------------------------------------------------
// This function is used to configure the BL652 to use the maximum Attribute
// Transmission Unit (MTU), maximum Attribute Data Length, and the maximum
// packet length
//-------------------------------------------------------------------------------
FUNCTION DataLengthExtension()

	// Get current maximum ATT_MTU and attribute data length
	rc = NvCfgKeyGet(ATTRIBUTE_MTU_KEY_ID, nAttributeMTU)
	rc = NvCfgKeyGet(ATTRIBUTE_DATA_LENGTH_KEY_ID, nAttributeLength)

	// Check if these are the values needed to achieve DLE
	IF  (nAttributeMTU != ATTRIBUTE_MTU_MAXIMUM) || (nAttributeLength != ATTRIBUTE_DATA_LENGTH_MAXIMUM) THEN
		// Change the Attribute MTU to be the maximum allowed by the BL652 (247)
		rc = NvCfgKeySet(ATTRIBUTE_MTU_KEY_ID, ATTRIBUTE_MTU_MAXIMUM)
		// Change the Attribute Data Length to be the maximum allowed by the BL652 (244)
		rc = NvCfgKeySet(ATTRIBUTE_DATA_LENGTH_KEY_ID, ATTRIBUTE_DATA_LENGTH_MAXIMUM)
		// Reset the module so that the data is overwritten
		Reset(0)
	ENDIF

	// Set maximum packet length (251)
	nBleMaxPacketLength = BLE_MAX_PACKET_LENGTH
	rc = BleMaxPacketLengthSet(nBleMaxPacketLength)

ENDFUNC 0

//-------------------------------------------------------------------------
// Initiate connection to remote device
//-------------------------------------------------------------------------
FUNCTION _connect()
	DIM addr$
	addr$ = BTAddr
    addr$ = StrDehexize$(addr$)

    //Connect to target device
    rc = BLECONNECT(addr$, 5000, 7500, 7700, 500000)
	print "\n## Connecting: ";StrHexize$(addr$);"\n"
ENDFUNC rc

//------------------------------------------------------------------------------
//UART data received
//------------------------------------------------------------------------------
FUNCTION HndlrUartRxVSP()
    DIM uLen
    IF BufferState == 0 && ModemStat == 1 then

        //Read data that has arrived through via the UART
        uLen = UartReadN(u$, nAttributeLength)

        IF uLen > 0 then
            rc = BLEGATTCWRITE(BleHandle, RXHandle, u$)
            BufferState = 1
            StrShiftLeft(u$,uLen)
        ENDIF
    ENDIF
ENDFUNC 1

//------------------------------------------------------------------------------
//BLE connection timed out
//------------------------------------------------------------------------------
FUNCTION HndlrConnTO()
    print "## Connection attempt timed out.\n"
ENDFUNC 1

//------------------------------------------------------------------------------
//Characteristic written
//------------------------------------------------------------------------------
FUNCTION HndlrAttrWrite(cHndl,aHndl,nSts)

    IF (Mode == 7) THEN
        //Enable TX notIFications
        Mode = 8
        Val$ = "\01\00"
        rc = BLEGATTCWRITE(BleHandle, TXCCCDHandle, Val$)
    ELSEIF (Mode == 8) THEN
        //Write to Modem In
		Mode = 9
		Val$ = "\01"
		BufferFull = 0
		rc = BLEGATTCWRITE(BleHandle, MIHandle, Val$)
    ELSEIF (Mode == 9) THEN
        //Now ready to send data
        BufferFull = 0
        BufferState = 0
        Mode = 10
        u$ = ""
        RecBuf$ = ""
		// Now that everything is setup, Requst maximum MTU
		rc = BleGattcAttributeMtuRequest(BleHandle)
    ELSEIF (Mode == 10) THEN
        //UART data was written
        BufferState = 0
        rc = HndlrUartRxVSP()
    ENDIF
ENDFUNC 1

//------------------------------------------------------------------------------
//Received BLE notification
//------------------------------------------------------------------------------
FUNCTION HndlrAttrNotify()
    DIM nCtx, Hndl, Data$, discard, UartSent, arc
    arc = BLEGATTCNOTIFYREAD(nCtx, Hndl, Data$, discard)
    while (arc == 0)
        IF (Hndl == MOHandle) then
            //Modem Out changed
            Val$ = "\01"
            IF (strcmp(Val$, Data$) == 0) then
                ModemStat = 1
                rc = HndlrUartRxVSP()
            ELSE
                ModemStat = 0
            ENDIF
        ELSEIF (Hndl == TXHandle) then
            //Data
            IF BufferFull == 0 then
                UartSent = UARTWRITE(Data$)
                IF UartSent != strlen(Data$) then
                    STRSHIFTLEFT(Data$, UartSent)
                    RecBuf$ = Data$

                    //NotIFy that we cannot accept more data
                    Val$ = "\00"
                    BufferFull = 1
                    rc = BLEGATTCWRITE(BleHandle, MIHandle, Val$)
                ENDIF
            ELSE
                //Buffer is full
                RecBuf$ = RecBuf$ + Data$
            ENDIF
        ENDIF
        Data$ = ""
        arc = BLEGATTCNOTIFYREAD(nCtx, Hndl, Data$, discard)
    endwhile
ENDFUNC 1

//------------------------------------------------------------------------------
//UART transmit buffer empty
//------------------------------------------------------------------------------
FUNCTION HndlrUartTxEmpty()
    DIM UartSent
    IF (strlen(RecBuf$) > 0) then
        UartSent = UARTWRITE(RecBuf$)
        IF (UartSent == strlen(RecBuf$)) then
            //Cleared - notify
            RecBuf$ = ""
            Val$ = "\01"
            BufferFull = 0
            rc = BLEGATTCWRITE(BleHandle, MIHandle, Val$)
        ELSE
            //Not cleared so shift
            STRSHIFTLEFT(RecBuf$, UartSent)
        ENDIF
    ELSE
        BufferFull = 0
    ENDIF
ENDFUNC 1

//------------------------------------------------------------------------------
//BLE characteristics data changed
//------------------------------------------------------------------------------
FUNCTION HndlrAttrRead(nCtx, Hndl, Stat)
    DIM Data$, discard, UartSent, nAhndl, nOfst
    rc = BleGattcReadData(Hndl,nAhndl,nOfst,Data$)
    IF (Hndl == MOHandle) then
        //Modem Out changed
        Val$ = "\01"
        IF (strcmp(Val$, Data$) == 0) then
            ModemStat = 1
            rc = HndlrUartRxVSP()
        ELSE
            ModemStat = 0
        ENDIF
    ELSEIF (Hndl == TXHandle) then
        //Data
        IF BufferFull == 0 then
            UartSent = UARTWRITE(Data$)
            IF UartSent != strlen(Data$) then
                STRSHIFTLEFT(Data$, UartSent)
                RecBuf$ = Data$

                //Notify that we cannot accept more data
                Val$ = "\00"
                BufferFull = 1
                rc = BLEGATTCWRITE(BleHandle, MIHandle, Val$)
            ENDIF
        ELSE
            //Buffer is full
            RecBuf$ = RecBuf$ + Data$
        ENDIF
    ENDIF
    Data$ = ""
ENDFUNC 1

//------------------------------------------------------------------------------
// This shows the cuttent connection parameters
//------------------------------------------------------------------------------
SUB ShowConnParms(nConnHandle)
	DIM intrvl,sprvto,slat
	rc = BleGetCurConnParms(nConnHandle,intrvl,sprvto,slat)
	print "## ConnParms :: Interval=";intrvl;",SuperTout=";sprvto;",SlaveLatency=";slat;"\n"
ENDSUB

//------------------------------------------------------------------------------
// Function to handle Ble event messages
//------------------------------------------------------------------------------
#define BLE_EVBLEMSGID_CONNECT                  0   //nCtx = connection handle
#define BLE_EVBLEMSGID_DISCONNECT               1   //nCtx = connection handle
#define BLE_EVBLEMSGID_SERVICE_ERROR            4   //nCtx = resultcode
#define BLE_EVBLEMSGID_DISPLAY_PASSKEY          9   //nCtx = passcode to display
#define BLE_EVBLEMSGID_NEW_BOND                 10  //nCtx = connection handle
#define BLE_EVBLEMSGID_AUTH_KEY_REQUEST         11  //nCtx = 1 for passkey, 2 for 16 byte OOB data
#define BLE_EVBLEMSGID_HRS_NOTIFICATION_STATE   12  //nCtx = new notification state 0=off, 1=on
#define BLE_EVBLEMSGID_CONN_PARMS_UPDATE        14  //nCtx = connection handle
#define BLE_EVBLEMSGID_CONN_PARMS_UPDATE_FAIL   15  //nCtx = connection handle
#define BLE_EVBLEMSGID_CONN_TO_BONDED_MASTER    16  //nCtx = connection handle
#define BLE_EVBLEMSGID_UPDATED_BOND             17  //nCtx = connection handle
#define BLE_EVBLEMSGID_ENCRYPTED                18  //nCtx = connection handle
#define BLE_EVBLEMSGID_POWER_FAILURE_WARNING    19  //nCtx = current supply voltage
#define BLE_EVBLEMSGID_UNENCRYPTED              20  //nCtx = connection handle
#define BLE_EVBLEMSGID_DEVICENAME_WRITE         21  //nCtx = connection handle
//------------------------------------------------------------------------------
FUNCTION HndlrBleMsg(nMsgId, nCtx)

    select nMsgId
    case BLE_EVBLEMSGID_CONNECT
        //Opening the GATT client only when connected to save memory
        rc = BleGattcOpen(256, 0)
        BleHandle = nCtx
        print "## Connected!\n"
		// Enable modem out notifications
		Val$ = "\01\00"
		Mode = 7
		rc = BLEGATTCWRITE(BleHandle, MOCCCDHandle, Val$)

    case BLE_EVBLEMSGID_DISCONNECT
        print " ## Disconnected!\n"
        BleGattcClose()

    case BLE_EVBLEMSGID_CONN_PARMS_UPDATE
		ShowConnParms(nCtx)

    case else
    endselect
ENDFUNC 1

//------------------------------------------------------------------------------
// This handler is called when there is an event that the attribute MTU has changed
//------------------------------------------------------------------------------
FUNCTION HandlerAttrMTUchng(BYVAL hCOnn AS INTEGER, BYVAL nSize AS INTEGER)
    print "## Attribute MTU Changed - Size=";nSize;"\n"
ENDFUNC 1

//------------------------------------------------------------------------------
// This handler is called when the packet length is changed
//------------------------------------------------------------------------------
FUNCTION HandlerPacketLength(BYVAL hConn, BYVAL Tx_Octets, BYVAL Tx_Time, BYVAL Rx_Octets, BYVAL Rx_Time)
    print "## Packet Length Changed - Tx=";Tx_Octets;" Rx=";Tx_Octets;"\n"
ENDFUNC 1

//******************************************************************************
// Start up code from here -equivalent to main() in a 'C' application
//******************************************************************************

// Close UART and open at 921600 baud rate
UartClose()
rc = UartOpen(921600, 0, 0, "CN81H")

// Enable Data Length Extension
IF ENABLE_DATA_LENGTH_EXTENSION==1 THEN
	rc = DataLengthExtension()
ENDIF

// Connect to remote device
rc = _connect()

//------------------------------------------------------------------------------
// Enable synchronous event handlers
//------------------------------------------------------------------------------
// Generic BLE events
ONEVENT EVATTRWRITE        CALL HndlrAttrWrite
ONEVENT EVATTRNOTIFY       CALL HndlrAttrNotify
ONEVENT EVATTRREAD         CALL HndlrAttrRead
ONEVENT EVBLEMSG           CALL HndlrBleMsg
ONEVENT EVBLE_CONN_TIMEOUT CALL HndlrConnTO
// UART events
ONEVENT EVUARTRX           CALL HndlrUartRxVSP
ONEVENT EVUARTTXEMPTY      CALL HndlrUartTxEmpty
// Data Length Extension events
ONEVENT EVATTRIBUTEMTU     CALL HandlerAttrMTUchng
ONEVENT EVPACKETLENGTH     CALL HandlerPacketLength

//------------------------------------------------------------------------------
// Wait for a synchronous event.
// An application can have multiple <WaitEvent> statements
//------------------------------------------------------------------------------
WAITEVENT
